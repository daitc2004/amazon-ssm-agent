// Code generated by mockery v1.0.0
package mocks

import context "github.com/aws/amazon-ssm-agent/agent/context"
import contracts "github.com/aws/amazon-ssm-agent/agent/contracts"
import mock "github.com/stretchr/testify/mock"
import runpluginutil "github.com/aws/amazon-ssm-agent/agent/framework/runpluginutil"
import task "github.com/aws/amazon-ssm-agent/agent/task"

// IPluginManager is an autogenerated mock type for the IPluginManager type
type IPluginManager struct {
	mock.Mock
}

// RunPlugins provides a mock function with given fields: _a0, plugins, ioConfig, pluginRegistry, resChan, cancelFlag
func (_m *IPluginManager) RunPlugins(_a0 context.T, plugins []contracts.PluginState, ioConfig contracts.IOConfiguration, pluginRegistry runpluginutil.PluginRegistry, resChan chan contracts.PluginResult, cancelFlag task.CancelFlag) map[string]*contracts.PluginResult {
	ret := _m.Called(_a0, plugins, ioConfig, pluginRegistry, resChan, cancelFlag)

	var r0 map[string]*contracts.PluginResult
	if rf, ok := ret.Get(0).(func(context.T, []contracts.PluginState, contracts.IOConfiguration, runpluginutil.PluginRegistry, chan contracts.PluginResult, task.CancelFlag) map[string]*contracts.PluginResult); ok {
		r0 = rf(_a0, plugins, ioConfig, pluginRegistry, resChan, cancelFlag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*contracts.PluginResult)
		}
	}

	return r0
}
